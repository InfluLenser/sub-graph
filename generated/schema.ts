// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Job extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("status", Value.fromString(""));
    this.set("employerId", Value.fromBigInt(BigInt.zero()));
    this.set("employeeId", Value.fromBigInt(BigInt.zero()));
    this.set("senderId", Value.fromBigInt(BigInt.zero()));
    this.set("recipientId", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Job entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Job entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Job", id.toString(), this);
    }
  }

  static load(id: string): Job | null {
    return changetype<Job | null>(store.get("Job", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get employerId(): BigInt {
    let value = this.get("employerId");
    return value!.toBigInt();
  }

  set employerId(value: BigInt) {
    this.set("employerId", Value.fromBigInt(value));
  }

  get employeeId(): BigInt {
    let value = this.get("employeeId");
    return value!.toBigInt();
  }

  set employeeId(value: BigInt) {
    this.set("employeeId", Value.fromBigInt(value));
  }

  get senderId(): BigInt {
    let value = this.get("senderId");
    return value!.toBigInt();
  }

  set senderId(value: BigInt) {
    this.set("senderId", Value.fromBigInt(value));
  }

  get recipientId(): BigInt {
    let value = this.get("recipientId");
    return value!.toBigInt();
  }

  set recipientId(value: BigInt) {
    this.set("recipientId", Value.fromBigInt(value));
  }

  get uri(): string | null {
    let value = this.get("uri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (!value) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromString(<string>value));
    }
  }
}

export class Review extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("jobId", Value.fromBigInt(BigInt.zero()));
    this.set("toId", Value.fromString(""));
    this.set("uri", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Review entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Review entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Review", id.toString(), this);
    }
  }

  static load(id: string): Review | null {
    return changetype<Review | null>(store.get("Review", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get jobId(): BigInt {
    let value = this.get("jobId");
    return value!.toBigInt();
  }

  set jobId(value: BigInt) {
    this.set("jobId", Value.fromBigInt(value));
  }

  get toId(): string {
    let value = this.get("toId");
    return value!.toString();
  }

  set toId(value: string) {
    this.set("toId", Value.fromString(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromString(""));
    this.set("uri", Value.fromString(""));
    this.set("handle", Value.fromString(""));
    this.set("withPoh", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get handle(): string {
    let value = this.get("handle");
    return value!.toString();
  }

  set handle(value: string) {
    this.set("handle", Value.fromString(value));
  }

  get withPoh(): boolean {
    let value = this.get("withPoh");
    return value!.toBoolean();
  }

  set withPoh(value: boolean) {
    this.set("withPoh", Value.fromBoolean(value));
  }

  get reviews(): Array<string> | null {
    let value = this.get("reviews");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set reviews(value: Array<string> | null) {
    if (!value) {
      this.unset("reviews");
    } else {
      this.set("reviews", Value.fromStringArray(<Array<string>>value));
    }
  }
}
