enum ServiceStatus {
  Filled
  Confirmed
  Rejected
  Finished
  Opened
}

enum PaymentType {
  Release
  Reimburse
}

type Service @entity {
  id: ID! # service token id
  createdAt: BigInt # timestamp of block creation
  updatedAt: BigInt # timestamp of the last change
  status: ServiceStatus! # service status
  buyer: User # service buyer
  seller: User # service seller
  sender: User # user that created the service (buyer or seller)
  recipient: User # other participating user (seller or buyer)
  uri: String # metadata URI of service
  transactionId: String # Escrow transaction id of service
  proposals: [Proposal!] @derivedFrom(field: "service") # proposals for this service
  platformId: ID! # Platform Id on which service token was minted
}

type Review @entity {
  id: ID! # review token id
  createdAt: BigInt # timestamp of block creation
  service: Service! # service this review is for
  to: User! # reviewed user
  uri: String! # metadata URI of review
  platformId: ID! # Platform Id on which review token was minted
}

type User @entity {
  id: ID! # user token id
  platformId: ID! # Platform Id on which user token was minted
  address: String! # wallet address of user
  uri: String! # metadata URI of profile
  handle: String! # handle of user
  withPoh: Boolean! # whether user has proof of identity
  numReviews: BigInt! # number of reviews user has received
  rating: BigDecimal! # average rating from reviews user has received
  reviews: [Review!] @derivedFrom(field: "to") # reviews of user
  buyerServices: [Service!] @derivedFrom(field: "buyer") # services user is an buyer for
  sellerServices: [Service!] @derivedFrom(field: "seller") # services user is an seller for
}

enum ProposalStatus {
  Pending
  Validated
  Rejected
}

type Proposal @entity {
  id: ID! # concatenation of serviceId + seller TalentLayerId
  service: Service! # service entity
  createdAt: BigInt # timestamp of block creation
  updatedAt: BigInt # timestamp of the last change
  status: ProposalStatus! # Proposal status
  seller: User # Proposal seller
  rateToken: Bytes # Rate token
  rateAmount: BigInt # Rate amount
  uri: String! # metadata URI of service
}

#NB: Payment sender will always be the Escrow Contract
type Payment @entity {
  id: ID! # autogenerated id
  createdAt: BigInt # timestamp of block creation
  service: Service! # service entity
  amount: BigInt # payment amount
  rateToken: Bytes # Rate token
  paymentType: String # Whether the payment is a release or a reimbursement
  transactionHash: String # Transaction hash of the transfer
}

type Platform @entity {
  id: ID! # platform id
  createdAt: BigInt # timestamp of block creation
  address: Bytes! # wallet address of platform owner
  name: String! # name of the platform
  uri: String # metadata URI of platform
  feePayments: [FeePayment!] @derivedFrom(field: "platform") # Platform-related fee payments
  totalPlatformGains: [PlatformGain!] @derivedFrom(field: "platform") # Platform-related total gains per token
  feeClaims: [FeeClaim!] @derivedFrom(field: "platform") # Platform-related fee claims
}

enum FeeType {
  Platform
  OriginPlatform
}

type FeePayment @entity {
  id: ID! # autogenerated id
  createdAt: BigInt # timestamp of block creation
  platform: Platform! # platform entity
  service: Service! # service entity
  type: FeeType! # fee type
  token: Bytes! # token address
  amount: BigInt # platform fee
}

type FeeClaim @entity {
  id: ID! # autogenerated id
  createdAt: BigInt # timestamp of block creation
  platform: Platform! # platform entity
  token: Bytes! # token address
  amount: BigInt! # claim amount
  transactionHash: String # Transaction hash of the transfer
}

type PlatformGain @entity {
  id: ID! # concatenation of platformId + token address
  platform: Platform! # platform entity
  token: Bytes! # token address
  totalOriginPlatformFeeGain: BigInt! # total Origin Platform gain
  totalPlatformFeeGain: BigInt! # total Platform gain
}